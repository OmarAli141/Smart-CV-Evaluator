[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "smart-cv-evaluator"
version = "1.0.0"
description = "AI-powered CV analysis for job seekers with ATS compatibility scoring"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "Smart CV Evaluator Team", email = "team@smartcvevaluator.com"}
]
keywords = ["cv", "resume", "ats", "ai", "analysis", "job", "career"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
dependencies = [
    "streamlit>=1.28.0",
    "pypdf>=4.0.1",
    "python-docx>=1.1.0",
    "langchain>=0.3.1",
    "langchain-community>=0.3.1",
    "ollama>=0.6.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]
docker = [
    "docker>=6.0.0",
    "docker-compose>=1.29.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/smart-cv-evaluator"
Documentation = "https://github.com/yourusername/smart-cv-evaluator#readme"
Repository = "https://github.com/yourusername/smart-cv-evaluator.git"
Issues = "https://github.com/yourusername/smart-cv-evaluator/issues"

[project.scripts]
smart-cv-evaluator = "app:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["src*", "config*"]

[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.coverage.run]
source = ["src", "config"]
omit = [
    "tests/*",
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
